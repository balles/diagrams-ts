import * as aws from "./providers/generated/aws/index";
import * as alibabacloud from "./providers/generated/alibabacloud/index";
import * as azure from "./providers/generated/azure/index";
import * as elastic from "./providers/generated/elastic/index";
import * as firebase from "./providers/generated/firebase/index";
import * as gcp from "./providers/generated/gcp/index";
import * as generic from "./providers/generated/generic/index";
import * as k8s from "./providers/generated/k8s/index";
import * as oci from "./providers/generated/oci/index";
import * as onprem from "./providers/generated/onprem/index";
import * as openstack from "./providers/generated/openstack/index";
import * as outscale from "./providers/generated/outscale/index";
import * as programming from "./providers/generated/programming/index";
import * as saas from "./providers/generated/saas/index";
import { EdgeAttributes, GraphAttributes, Node, NodeAttributes, Renderer, RenderFunc } from "./graph";
import { Stream } from "stream";
export declare const providers: {
    aws: typeof aws;
    alibabacloud: typeof alibabacloud;
    azure: typeof azure;
    elastic: typeof elastic;
    firebase: typeof firebase;
    gcp: typeof gcp;
    generic: typeof generic;
    k8s: typeof k8s;
    oci: typeof oci;
    onprem: typeof onprem;
    openstack: typeof openstack;
    outscale: typeof outscale;
    programming: typeof programming;
    saas: typeof saas;
};
export declare type DiagramNode = Node & {
    isExternal?: boolean;
};
export declare type edgeTemplateInput = DiagramNode | DiagramNode[];
export declare const ext: (nodes: edgeTemplateInput) => edgeTemplateInput;
export declare const createSubDiagram: (edgeAttributes?: EdgeAttributes | undefined) => (operators: TemplateStringsArray, ...nodes: edgeTemplateInput[]) => RenderFunc[];
export declare const diagram: (operators: TemplateStringsArray, ...nodes: edgeTemplateInput[]) => RenderFunc[];
export declare const dg: (operators: TemplateStringsArray, ...nodes: edgeTemplateInput[]) => RenderFunc[];
export declare const styled: (edgeAttributes?: EdgeAttributes | undefined) => (operators: TemplateStringsArray, ...nodes: edgeTemplateInput[]) => RenderFunc[];
export declare const asCluster: (graphAtts?: GraphAttributes, nodeAtts?: NodeAttributes | undefined, edgeAtts?: EdgeAttributes | undefined) => (elements: RenderFunc[]) => RenderFunc;
export declare const initDiagram: (label: string, direction?: string | undefined) => (diagram: () => RenderFunc[]) => Promise<string>;
export declare type CreateDiagramArguments<T> = {
    label: string;
    direction?: string;
    outformat?: string;
    filename?: string;
    graphAttr?: GraphAttributes;
    nodeAttr?: NodeAttributes;
    edgeAttr?: EdgeAttributes;
    renderer?: Renderer<T>;
};
export declare const createDiagram: ({ label, direction, outformat, filename, graphAttr, nodeAttr, edgeAttr, renderer, }: CreateDiagramArguments<string | Stream>) => (elements: RenderFunc[]) => Promise<string | Stream>;
